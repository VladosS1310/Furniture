<?php
/**
 * @category  Apptrian
 * @package   Apptrian_MetaPixelApi
 * @author    Apptrian
 * @copyright Copyright (c) Apptrian (http://www.apptrian.com)
 * @license   http://www.apptrian.com/license Proprietary Software License EULA
 */

/**
 * Meta Pixel Code block
 *
 * @var \Apptrian\MetaPixelApi\Block\Code $block
 */

$data                = $block->getMetaPixelData();
$idData              = $data['id_data'];
$action              = $data['full_action_name'];
$pageHandles         = $data['page_handles'];
$pageHandlesCategory = $data['page_handles_category'];
$pageHandlesProduct  = $data['page_handles_product'];
$pageHandlesQuote    = $data['page_handles_quote'];
$pageHandlesOrder    = $data['page_handles_order'];
$pageHandlesSearch   = $data['page_handles_search'];

$isPixelEnabled    = $block->isPixelEnabled();
$isApiEnabled      = $block->isApiEnabled();
$isBaseCodeEnabled = $block->isBaseCodeEnabled();
$firingMode        = $block->getFiringMode();

$isPageViewEnabled    = $block->isEventEnabled('PageView');
$isPageViewWithAll    = $block->isPageViewWithAll();
$isPageViewWithAllApi = $block->isPageViewWithAll(true);

$isMoveParamsOutsideContentsEnabled = $block->isMoveParamsOutsideContentsEnabled();

$isDataProcessingEnabled = $block->isDataProcessingEnabled();
$dpo                     = $block->getDpo();
$dpoCountry              = $block->getDpoCountry();
$dpoState                = $block->getDpoState();

$isCookieConsentEnabled = $block->isCookieConsentEnabled();
$consentCookieName      = $block->getConsentCookieName();
$consentCookieKey       = $block->getConsentCookieKey();
$consentCookieValue     = $block->getConsentCookieValue();
$consentButton          = $block->getConsentButton();

$baseUrl = $block->helper->getBaseUrl();

$compatibility = $block->getCompatibility();

// bof Check if Meta Pixel is allowed
if ($compatibility == 'breeze' && in_array($action, $pageHandles) && ($isPixelEnabled || $isApiEnabled)): ?>
<!-- Meta Pixel Code -->

    <?php if (isset($secureRenderer)): ?>
        <?php
            // Get script tag with a nonce
            $scriptTag = $secureRenderer->renderTag(
                'script',
                ['data-breeze' => 'breeze'],
                "var apptrianMeta;",
                false
            );
            
            $scriptTag = substr($scriptTag, 0, strpos($scriptTag, 'var apptrianMeta;'));
            
            $scriptTag = str_replace('data-breeze="breeze"', 'data-breeze', $scriptTag);
        ?>
        <?= /* @noEscape */ $scriptTag; ?>
    <?php else: ?>
    <script data-breeze>
    <?php endif; ?>

// Must be in the global scope or it will not work
var apptrianMetaLoadCount = 0;

(function (window, document) {
    var propagationStop = 0;
    
    function isTurboEnabled() {
        var scripts = document.scripts;
        var turbo = false;
        
        for (var script of scripts) {
            var src = script.getAttribute('src');
            
            if (src && src.indexOf('turbolinks') !== -1) {
                turbo = true;
                break;
            }
        }
        
        return turbo;
    }
    
    if (isTurboEnabled()) {
        // Turbo mode is enabled so increment for every page load
        document.addEventListener('breeze:load', function() {
            apptrianMetaLoadCount++;
        });
    } else {
        // Turbo mode is disabled this will be executed only once
        apptrianMetaLoadCount++;
    }
    
    function onDocumentReady() {
        (function (events) {
            function loadCode() {
                events.forEach(function (e) {
                    window.removeEventListener(e, loadCode);
                });
                
                // bof code
                
    <?php if ($isBaseCodeEnabled): ?>
    // bof initialization code
    !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
    n.push=n;n.loaded=!0;n.version='2.0';n.agent='dvapptrian';n.queue=[];
    t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];
    s.parentNode.insertBefore(t,s)}(window,
    document,'script','https://connect.facebook.net/en_US/fbevents.js');
            <?php if ($isCookieConsentEnabled): ?>
                fbq('consent', 'revoke');
            <?php endif; ?>
    // eof initialization code
    <?php endif; ?>
        
        function jsonToUrlEncoded(element, key, list) {
            var list = list || [];
            
            if (typeof(element) === 'object' && !Array.isArray(element)) {
                for (var idx in element) {
                    if (element.hasOwnProperty(idx)) {
                        jsonToUrlEncoded(element[idx], key?key+'['+idx+']':idx, list);
                    }
                }
            } else if (typeof(element) === 'object' && Array.isArray(element)) {
                for (var i = 0; i < element.length; i += 1) {
                    jsonToUrlEncoded(element[i], key?key+'['+i+']':i, list);
                }
            } else {
                list.push(key + '=' + encodeURIComponent(element));
            }
            
            return list.join('&');
        }
        
        function getTimestamp() {
            var timestamp = 0;
            
            if (!Date.now) {
                timestamp = new Date().getTime();
            } else {
                timestamp = Date.now();
            }
            
            return timestamp;
        }
        
        function getUserData() {
            var query = 'sections=apptrian_metapixelapi_matching_section';
            var sectionUrl = '<?= /* @noEscape */ $baseUrl ?>customer/section/load?' + query + '&_=' + getTimestamp();
            
            var request = new XMLHttpRequest();
            request.open('GET', sectionUrl, true);
            request.setRequestHeader('Accept', 'application/json');
            request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            
            request.onreadystatechange = function () {
                if (this.readyState === 4) {
                    if (this.status >= 200 && this.status < 400) {
                        // Success
                        var data = JSON.parse(this.responseText);
                        run(data);
                    } else {
                        // Error
                    }
                }
            };
            
            request.send();
            request = null;
        }
        
        getUserData();
        
        function run(response) {
            var userData = {};
            <?= /* @noEscape */ $block->getUrlMarker() ?>
            <?= /* @noEscape */ $block->getCategoryIdMarker() ?>
            <?= /* @noEscape */ $block->getProductIdMarker() ?>
            <?= /* @noEscape */ $block->getSearchMarker() ?>
            
            function isEmpty(obj) {
                for(var prop in obj) {
                    if(obj.hasOwnProperty(prop)) {
                        return false;
                    }
                }
                
                return true;
            }
            
            if (propagationStop === 0) {
                propagationStop = 1;
                
                var section;
                var sectionData;
                
                if (response !== 'undefined' && response.hasOwnProperty('apptrian_metapixelapi_matching_section')) {
                    section = response.apptrian_metapixelapi_matching_section;
                    
                    if (section !== 'undefined' && section.hasOwnProperty('matching_data')) {
                        sectionData = section.matching_data;
                        
                        if (!isEmpty(sectionData)) {
                            userData = sectionData;
                        }
                    }
                }
    
    <?php if ($isBaseCodeEnabled): ?>
        <?php if ($isDataProcessingEnabled): ?>
        fbq(
            'dataProcessingOptions',
            <?= /* @noEscape */ json_encode($dpo, JSON_PRETTY_PRINT) ?>,
            <?= /* @noEscape */ $dpoCountry ?>,
            <?= /* @noEscape */ $dpoState ?>
        );
        <?php endif; ?>
    
        <?php foreach ($idData as $id): ?>
        if (apptrianMetaLoadCount === 1) {fbq('init', '<?= /* @noEscape */ $id ?>', userData);}
        <?php endforeach ?>
    <?php endif; ?>
    
        function stringToHash(string) {
            var hash = 0;
            var stringLength = string.length;
            var i;
            var char;
            
            if (stringLength === 0) {
                return hash;
            }
            
            for (i = 0; i < stringLength; i += 1) {
                char = string.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash;
            }
            
            return String(hash);
        }
        
        function generateEventId(eName) {
            var uCookie = document.cookie;
            var uHash = stringToHash(uCookie);
            var url = window.location.href;
            var urlHash = stringToHash(url);
            var timestamp = String(getTimestamp());
            
            return eName + uHash + urlHash + timestamp;
        }
        
        function fireConversionsApiEvent(eName, eData, eId) {
            var data = {};
            data.eventName = eName;
            data.eventData = eData;
            data.eventId = eId;
            data.url = window.location.href;
            data.userData = userData;
            
            var query = jsonToUrlEncoded(data);
            var apiUrl = '<?=
                /* @noEscape */ $baseUrl ?>apptrian_metapixelapi/index/index?' + query + '&_=' + getTimestamp();
            
            var request = new XMLHttpRequest();
            request.open('GET', apiUrl, true);
            request.setRequestHeader('Accept', 'application/json');
            request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            
            request.onreadystatechange = function () {
                if (this.readyState === 4) {
                    if (this.status >= 200 && this.status < 400) {
                        // Success
                        var result = this.responseText;
                    } else {
                        // Error
                    }
                }
            };
            
            request.send();
            request = null;
        }
        
        function moveParamsOutsideContents(data) {
    <?php if ($isMoveParamsOutsideContentsEnabled): ?>
        var isMoveParamsOutsideContentsEnabled = 1;
    <?php else: ?>
        var isMoveParamsOutsideContentsEnabled = 0;
    <?php endif; ?>
            
            if (isMoveParamsOutsideContentsEnabled) {
                if (!('contents' in data)) {
                    return data;
                }
                
                var contents       = data['contents'];
                var contentsLength = contents.length;
                
                if (contentsLength > 1) {
                    var c = 0;
                    for (var i = 0; i < contentsLength; i++) {
                        var item = contents[i];
                        
                        for (var index in item) {
                            if (index == 'id' || index == 'item_price' || index == 'quantity') {
                                continue;
                            }
                            
                            // You cannot do anything with param just
                            // Remove the param from contents
                            delete data['contents'][c][index];
                        }
                        
                        c++;
                    }
                } else {
                    var item = contents[0];
                    for (var index in item) {
                        var value = item[index];
                        if (index == 'id' || index == 'item_price' || index == 'quantity') {
                            continue;
                        }
                        
                        // Set the param
                        data[index] = value;
                        // Remove the param from contents
                        delete data['contents'][0][index];
                    }
                }
                
                return data;
            } else {
                return data;
            }
        }
        
        function addContentIdsParam(data)
        {
            if (data !== null && typeof data === 'object' && data.hasOwnProperty('contents')) {
                var contents = data.contents;
                
                var arrayLength = contents.length;
                var item = {};
                var contentIds = [];
                var id = '';
                
                for (var i = 0; i < arrayLength; i++) {
                    item = contents[i];
                    id = String(item.id);
                    contentIds.push(id);
                }
                
                if (contentIds.length) {
                    data.content_ids = contentIds;
                }
            }
            
            return data;
        }
        
        // Ready PageView data. (It is fired below for each event conditionally.)
        var pageViewEventId = generateEventId("PageView");
        var pageViewEventIdObj = {};
        pageViewEventIdObj.eventID = pageViewEventId;
        
        var pageViewData = {};
    
    <?php
    // bof category code
    if (in_array($action, $pageHandlesCategory)): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
        
        <?php
        $categoryData = $block->getCategoryData();
        if (!empty($categoryData)): ?>
            <?php
                $categoryEventName = $categoryData['event_name'];
                $categoryEventData = $categoryData['data'];
                
                $categoryEventNameJson = json_encode($categoryEventName, JSON_PRETTY_PRINT);
                $categoryEventDataJson = json_encode($categoryEventData, JSON_FORCE_OBJECT);
            ?>
            
            var categoryEventName = <?= /* @noEscape */ $categoryEventNameJson ?>;
            var categoryEventData = <?= /* @noEscape */ $categoryEventDataJson ?>;
            var categoryEventId = generateEventId(categoryEventName);
            var categoryEventIdObj = {};
            categoryEventIdObj.eventID = categoryEventId;
            
            <?php if ($block->isEventEnabled('ViewContent') && $isBaseCodeEnabled): ?>
            fbq("track", categoryEventName, categoryEventData, categoryEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('ViewContent')): ?>
            if (isConsentGranted()) {fireConversionsApiEvent(categoryEventName, categoryEventData, categoryEventId);}
            <?php endif; ?>
            
        <?php endif; ?>
        <?php
    // eof category code
    // bof product code
    elseif (in_array($action, $pageHandlesProduct)): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
        
        <?php
        $productData = $block->getProductData();
        // bof product data
        if (!empty($productData)): ?>
            <?php
            
            $productEventData               = $productData['data'];
            $productEventDataWithContentIds = $productData['data_with_content_ids'];
            $contentsWithIds                = $productData['contents_with_ids'];
            $bundleProductOptionsData       = $productData['bundle_product_options_data'];
            $configurableProductOptionsData = $productData['configurable_product_options_data'];
            $productId                      = $productData['product_id'];
            $productType                    = $productData['product_type'];
            $isDetectSelectedSkuEnabled     = $block->isDetectSelectedSkuEnabled($productType);
            
            if (empty($productEventDataWithContentIds)) {
                $productEventDataForViewContent = $productEventData;
            } else {
                $productEventDataForViewContent = $productEventDataWithContentIds;
            }
        
            $productEventDataJson               = json_encode($productEventData, JSON_PRETTY_PRINT);
            $productEventDataForViewContentJson = json_encode($productEventDataForViewContent, JSON_PRETTY_PRINT);
            $contentsWithIdsJson                = json_encode($contentsWithIds, JSON_PRETTY_PRINT);
            $bundleProductOptionsDataJson       = json_encode($bundleProductOptionsData, JSON_PRETTY_PRINT);
            $configurableProductOptionsDataJson = json_encode($configurableProductOptionsData, JSON_PRETTY_PRINT);
            
            ?>

var productData = <?= /* @noEscape */ $productEventDataJson ?>;
var productDataForViewContent = <?= /* @noEscape */ $productEventDataForViewContentJson ?>;
var isAddToCartReady = 1;
var isDetectSelectedSkuEnabled = 0;
var taxFlag = <?= /* @noEscape */ $block->getDisplayTaxFlag() ?>;

            <?php if ($isDetectSelectedSkuEnabled): ?>
            // This is used to check whether to execute updateProductData functions
            isDetectSelectedSkuEnabled = 1;
        
                <?php if ($productType == 'bundle'): ?>
                // bof Detect product SKUs (bundle)
    
var contentsWithIds = <?= /* @noEscape */ $contentsWithIdsJson ?>;
var bundleProductOptionsData = <?= /* @noEscape */ $bundleProductOptionsDataJson ?>;
var selectors = {};
    
    // bof option loop
    for (let optionId in bundleProductOptionsData) {
        // Set all quantity input selectors
        var nameAttributeValue = 'bundle_option_qty[' + optionId + ']';
        selectors['qty' + optionId] = document.querySelector('input[name="' + nameAttributeValue + '"]');
        
        // bof Quantity input handler
        if (selectors['qty' + optionId]) {
            ['change', 'keyup', 'paste', 'click'].forEach(function(e) {
                selectors['qty' + optionId].addEventListener(e, function() {
                    var idAttr        = this.getAttribute('id');
                    var oId           = idAttr.replace(/[^0-9]/g, '');
                    var pId           = 0;
                    var typeAttr      = '';
                    var sIds          = 0;
                    var nameAttrValue = '';
                    var valueAttr     = '';
                    
                    // Set qty of all sibling selections
                    var siblings = bundleProductOptionsData[oId];
                    for (let sId in siblings) {
                        pId = siblings[sId]['product_id'];
                        
                        if (document.querySelector('#bundle-option-' + oId + '-' + sId) !== null) {
                            // bof radio (checkbox does not have qty input)
                            typeAttr = selectors['opt' + oId + '_' + sId].getAttribute('type');
                            
                            if (typeAttr == 'radio') {
                                if(selectors['opt' + oId + '_' + sId].checked) {
                                    // Set qty of product to current qty value
                                    contentsWithIds[pId].quantity = formatQty(this.value);
                                }
                            }
                            
                            if (typeAttr == 'hidden') {
                                // Case when there is only one radio option
                                // Set qty of product to current qty value
                                contentsWithIds[pId].quantity = formatQty(this.value);
                            }
                            // eof radio (checkbox does not have qty input)
                        } else if (document.querySelector('#bundle-option-' + oId) !== null) {
                            // bof dropdown (multiselect does not have qty input)
                            sIds = selectors['opt' + oId + '_' + sId].parentNode.value;
                            
                            if (!Array.isArray(sIds) && sIds == sId) {
                                // Set qty of product to current qty value
                                contentsWithIds[pId].quantity = formatQty(this.value);
                            }
                            // eof dropdown (multiselect does not have qty input)
                        } else {
                            // Edge case when there is only one option in dropdown
                            // There is no id only name="bundle_option[X]" value="Y" type="hidden"
                            nameAttrValue = 'bundle_option[' + optionId + ']';
                            selectors['opt' + oId + '_' + sId] = document.querySelector(
                                'input[name="' + nameAttrValue + '"]'
                            );
                            
                            typeAttr = selectors['opt' + oId + '_' + sId].getAttribute('type');
                            
                            if (typeAttr == 'hidden') {
                                valueAttr = selectors['opt' + oId + '_' + sId].getAttribute('value');
                                if (valueAttr == sId) {
                                    // Set qty of product to current qty value
                                    contentsWithIds[pId].quantity = formatQty(this.value);
                                }
                            }
                        }
                    }
                });
            });
        }
        // eof Quantity input handler
        
        // bof selection loop
        for (let selectionId in bundleProductOptionsData[optionId]) {
            // Get product ID
            var pId = bundleProductOptionsData[optionId][selectionId]['product_id'];
            
            // Initialize default product qty var
            var pQty = 0;
            
            // Set qty to 0
            contentsWithIds[pId].quantity = 0;
            
            if (document.querySelector('#bundle-option-' + optionId + '-' + selectionId) !== null) {
                // bof checkbox and radio
                
                var idAttributeValue = 'bundle-option-' + optionId + '-' + selectionId;
                selectors['opt' + optionId + '_' + selectionId] = document.querySelector('#' + idAttributeValue);
                
                var typeAttr = selectors['opt' + optionId + '_' + selectionId].getAttribute('type');
                
                // bof If anything is pre-checked
                if (selectors['opt' + optionId + '_' + selectionId].checked) {
                    // Case when there is qty input
                    if (selectors['qty' + optionId] !== null) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].value);
                    } else {
                        // Case when there is no qty input
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof If anything is pre-checked
                
                // bof Edge case when there is only one radio
                if (typeAttr == 'hidden') {
                    // Edge case only one radio option
                    // Case when there is qty input
                    if (selectors['qty' + optionId] !== null) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].value);
                    } else {
                        // Case when there is no qty input
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof Edge case when there is only one radio
                
                // bof Edge case when there is 'none' radio option
                if (typeAttr == 'radio') {
                    if (document.querySelector('#bundle-option-' + optionId) !== null) {
                        var oProperty = 'opt' + optionId + '_none';
                        
                        if (!selectors.hasOwnProperty(oProperty)) {
                            // Set this 'none' radio option only if it is not set
                            selectors[oProperty] = document.querySelector('#bundle-option-' + optionId);
                        }
                        
                        // The 'none' radio option handler
                        if (selectors[oProperty]) {
                            ['change', 'click'].forEach(function(e) {
                                selectors[oProperty].addEventListener(e, function() {
                                    var idAttr = this.getAttribute('id');
                                    var oId    = idAttr.replace(/[^0-9]/g, '');
                                    
                                    if(this.checked) {
                                        // Set qty of all siblings to 0
                                        var spId = 0;
                                        var siblings = bundleProductOptionsData[oId];
                                        for (let s in siblings) {
                                            spId = siblings[s]['product_id'];
                                            contentsWithIds[spId].quantity = 0;
                                        }
                                    }
                                });
                            });
                        }
                    }
                }
                // eof Edge case when there is 'none' radio option
                
                // bof checkbox and radio handler
                if (selectors['opt' + optionId + '_' + selectionId]) {
                    ['change', 'click'].forEach(function(e) {
                        selectors['opt' + optionId + '_' + selectionId].addEventListener(e, function() {
                            var idAttr   = this.getAttribute('id');
                            var typeAttr = this.getAttribute('type');
                            var oId      = 0;
                            var sId      = 0;
                            var pId      = 0;
                            
                            // Get option IDs from id attribute
                            var optionAndSelectionIds = (idAttr.match(/\d+\.\d+|\d+\b|\d+(?=\w)/g) || []).map(
                                function (v) {return +v;}
                            );
                            
                            // If there are 2 ids then you can detect product ID
                            if (optionAndSelectionIds.length === 2) {
                                oId = optionAndSelectionIds[0];
                                sId = optionAndSelectionIds[1];
                                
                                pId = bundleProductOptionsData[oId][sId]['product_id'];
                                
                                // If it is checkbox
                                if (typeAttr == 'checkbox') {
                                    // If it is checked
                                    if(this.checked) {
                                        // Get default quantity
                                        var pQty = bundleProductOptionsData[oId][sId]['product_quantity'];
                                        // Set qty of product to defualt quantity
                                        contentsWithIds[pId].quantity = pQty;
                                    }
                                    // If it is not checked
                                    if(!this.checked) {
                                        // Set qty of product to 0
                                        contentsWithIds[pId].quantity = 0;
                                    }
                                }
                                
                                // If it is radio
                                if (typeAttr == 'radio') {
                                    if(this.checked) {
                                        // Set qty of all siblings to 0
                                        var spId = 0;
                                        var siblings = bundleProductOptionsData[oId];
                                        for (let s in siblings) {
                                            spId = siblings[s]['product_id'];
                                            contentsWithIds[spId].quantity = 0;
                                        }
                                        
                                        // Set qty of product to current qty value
                                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].value);
                                        
                                        // bof Fix for radio not reading correct qty value
                                        setTimeout(function() {
                                            // Set qty of product to current qty value
                                            contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].value);
                                        }, 300);
                                        // eof Fix for radio not reading correct qty value
                                    }
                                }
                            }
                        });
                    });
                }
                // eof checkbox and radio handler
                
                // eof checkbox and radio
            } else if (document.querySelector('#bundle-option-' + optionId) !== null) {
                // bof dropdown and multiselect
                
                var idAttribute = 'bundle-option-' + optionId;
                selectors['opt' + optionId + '_' + selectionId] = document.querySelector(
                    '#' + idAttribute + ' option[value="' + selectionId +'"]'
                );
                
                // bof If anything is pre-selected
                if (selectors['opt' + optionId + '_' + selectionId].selected) {
                    // Case when there is qty input
                    if (selectors['qty' + optionId] !== null) {
                        // Set qty of product to current qty value
                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + optionId].value);
                    } else {
                        // Case when there is no qty input
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
                // eof If anything is pre-selected
                
                // bof dropdown and multiselect handler
                if (selectors['opt' + optionId + '_' + selectionId].parentNode !== null) {
                    ['change', 'click'].forEach(function(e) {
                        selectors['opt' + optionId + '_' + selectionId].parentNode.addEventListener(e, function() {
                            var idAttr       = this.getAttribute('id');
                            var oId          = idAttr.replace(/[^0-9]/g, '');
                            var sId          = this.value;
                            var pId          = 0;
                            var pQty         = 0;
                            var multipleAttr = this.getAttribute('multiple');
                            
                            // Set qty of all siblings to 0
                            var siblings = bundleProductOptionsData[oId];
                            var spId     = 0;
                            
                            for (let s in siblings) {
                                spId = siblings[s]['product_id'];
                                contentsWithIds[spId].quantity = 0;
                            }
                            
                            if (multipleAttr == 'multiple') {
                                var multiselectOptions = this.selectedOptions;
                                var multiselectValues = Array.from(multiselectOptions).map(({ value }) => value);
                                sId = multiselectValues;
                            }
                            
                            if (Array.isArray(sId)) {
                                // There is a bug when using for let loop
                                // sId sometimes gets additional indexes
                                // Use simple for loop with length and index
                                // (Happens with multiselect)
                                for (var i = 0; i < sId.length; i++) {
                                    var selId = sId[i];
                                    
                                    // If both exist then set product selection
                                    if (oId && selId) {
                                        // Get product Id
                                        pId = bundleProductOptionsData[oId][selId]['product_id'];
                                        // Get default quantity
                                        pQty = bundleProductOptionsData[oId][selId]['product_quantity'];
                                        // Set qty of product to defualt quantity
                                        contentsWithIds[pId].quantity = pQty;
                                    } else {
                                        // Edge case if there is 'none' option for multiselect
                                        // Set qty of all siblings to 0
                                        for (let s in siblings) {
                                            spId = siblings[s]['product_id'];
                                            contentsWithIds[spId].quantity = 0;
                                        }
                                        
                                        if (multipleAttr != 'multiple') {
                                            // Break out of the for loop
                                            // (No need to look at other selections because 'none' is selected.)
                                            break;
                                        }
                                    }
                                }
                            } else {
                                // If both exist then set product selection
                                if (oId && sId) {
                                    // Get product Id
                                    pId = bundleProductOptionsData[oId][sId]['product_id'];
                                    // Set qty of product to current qty value
                                    if (selectors['qty' + oId] !== null) {
                                        contentsWithIds[pId].quantity = formatQty(selectors['qty' + oId].value);
                                    } else {
                                        contentsWithIds[pId].quantity = 1;
                                    }
                                } else {
                                    // Edge case if there is 'none' option for dropdown
                                    // Set qty of all siblings to 0
                                    for (let s in siblings) {
                                        spId = siblings[s]['product_id'];
                                        contentsWithIds[spId].quantity = 0;
                                    }
                                }
                            }
                        });
                    });
                }
                // eof dropdown and multiselect handler
                
                // eof dropdown and multiselect
            } else {
                // Edge case when checkbox and multiselect have only one option
                // Checkbox - There is no id only name="bundle_option[X]" value="Y" type="hidden"
                // Multiselect - There is no id only name="bundle_option[X]" value="Y" type="hidden"
                // To unify the code use name attribute selector
                var nameAttributeValue = 'bundle_option[' + optionId + ']';
                selectors['opt' + optionId + '_' + selectionId] = document.querySelector(
                    'input[name="' + nameAttributeValue + '"]'
                );
                
                var typeAttr = selectors['opt' + optionId + '_' + selectionId].getAttribute('type');
                
                if (typeAttr == 'hidden') {
                    var valueAttr = selectors['opt' + optionId + '_' + selectionId].getAttribute('value');
                    if (valueAttr == selectionId) {
                        // Get default quantity
                        pQty = bundleProductOptionsData[optionId][selectionId]['product_quantity'];
                        // Set qty of product to defualt quantity
                        contentsWithIds[pId].quantity = pQty;
                    }
                }
            }
        }
        // eof selection loop
    }
    // eof option loop
    
    // bof Update product data based on selected SKUs (bundle)
    function updateProductData() {
        if('contents' in productData) {
            // Reset contents
            productData.contents = [];
            
            // Set value to 0
            productData.value = 0;
            
            var qty = 0;
            var newValue = 0;
            var itemValue = 0;
            var itemTotal = 0;
            var globalQty = formatQty(document.querySelector('#qty').value);
            
            for (let productId in contentsWithIds) {
                qty = contentsWithIds[productId].quantity;
                if (qty > 0) {
                    // Adjust qty with global qty
                    if (globalQty > 1) {
                        qty = qty * globalQty;
                        contentsWithIds[productId].quantity = qty;
                    }
                    
                    // Set the item in the contents
                    productData.contents.push(contentsWithIds[productId]);
                    
                    // Increase value based on qty and price
                    itemValue = contentsWithIds[productId].item_price;
                    itemTotal = itemValue * qty;
                    // Make sure it is 2 decimal float
                    newValue += parseFloat(parseFloat(itemTotal).toFixed(2));
                }
            }
            
            // Set value to new value
            productData.value = parseFloat(parseFloat(newValue).toFixed(2));
        }
        
        // Make sure content_type is set to product
        // Detection will return product not product_group
        if ('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKUs (bundle)
    
                // eof Detect product SKUs (bundle)
                <?php elseif ($productType == 'configurable'): ?>
                // bof Detect product SKU (configurable)
    
    var selectedPrice   = 0;
    var selectedQty     = 1;
    var selectedId      = 0;
    var selectedSku     = '';
    var selectedSkuData = null;
    var contentsWithIds = <?= /* @noEscape */ $contentsWithIdsJson ?>;
    var configurableProductId = <?= /* @noEscape */ $productId ?>;
    var elPrice         = document.querySelector('#product-price-' + configurableProductId);
    var elPriceInclTax  = document.querySelector('#price-including-tax-product-price-' + configurableProductId);
    var elQty           = document.getElementById('qty');
    
    // Disallow until variant is selected
    isAddToCartReady = 0;
    
    // bof Detect selected SKU
    document.querySelectorAll('#product_addtocart_form').forEach(function(element) {
            element.addEventListener('click', function() {
            selectedProduct();
        });
    });
    
    function selectedProduct() {
        var selectedOptions = {};
        
        document.querySelectorAll('div.swatch-attribute').forEach(function(v) {
            var attributeId = v.getAttribute('data-attribute-id');
            var optionSelected = v.getAttribute('data-option-selected');
            if (!attributeId || !optionSelected) {
                return;
            }
            selectedOptions[attributeId] = optionSelected;
        });
        
        var productIdIndex = <?= /* @noEscape */ $configurableProductOptionsDataJson ?>;
        var foundIds = [];
        
        for (var prop in productIdIndex) {
            var productId = prop;
            var attributes = productIdIndex[prop];
            
            function productIsSelected(attributes, selectedOptions) {
                // bof isEqual function
                function isEqual (obj1, obj2) {
                    function getType (obj) {
                        return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
                    }
                    
                    function areArraysEqual () {
                        // Check length
                        if (obj1.length !== obj2.length) return false;
                        
                        // Check each item in the array
                        for (var i = 0; i < obj1.length; i++) {
                            if (!isEqual(obj1[i], obj2[i])) return false;
                        }
                        
                        // If no errors, return true
                        return true;
                    }
                    
                    function areObjectsEqual () {
                        if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;
                        
                        // Check each item in the object
                        for (var key in obj1) {
                            if (Object.prototype.hasOwnProperty.call(obj1, key)) {
                                if (!isEqual(obj1[key], obj2[key])) return false;
                            }
                        }
                        
                        // If no errors, return true
                        return true;
                    }
                    
                    function areFunctionsEqual () {
                        return obj1.toString() === obj2.toString();
                    }
                    
                    function arePrimativesEqual () {
                        return obj1 === obj2;
                    }
                    
                    // Get the object type
                    var type = getType(obj1);
                    
                    // If the two items are not the same type, return false
                    if (type !== getType(obj2)) return false;
                    
                    // Compare based on type
                    if (type === 'array') return areArraysEqual();
                    if (type === 'object') return areObjectsEqual();
                    if (type === 'function') return areFunctionsEqual();
                    
                    return arePrimativesEqual();
                }
                // eof isEqual function
                
                return isEqual(attributes, selectedOptions);
            }
            
            if (productIsSelected(attributes, selectedOptions)) {
                foundIds.push(productId);
            }
        }
        
        if (foundIds.length) {
            selectedId = foundIds[0];
            
            if (selectedId && selectedId in contentsWithIds) {
                selectedSkuData = contentsWithIds[selectedId];
                selectedSku     = contentsWithIds[selectedId]['id'];
                
                if (taxFlag) {
                    if (elPriceInclTax !== null) {
                        selectedPrice = formatPrice(elPriceInclTax.innerText);
                    } else {
                        if (elPrice !== null) {
                            selectedPrice = formatPrice(elPrice.innerText);
                        }
                    }
                } else {
                    if (elPrice !== null) {
                        selectedPrice = formatPrice(elPrice.innerText);
                    }
                }
                
                selectedQty = formatQty(elQty.value);
            } else {
                // Selected ID is not found
                selectedId = 0;
            }
        } else {
            // Variant is not selected
            selectedId = 0;
        }
    }
    // eof Detect selected SKU
    
    // bof Detect selected SKU qty
    if (elQty) {
        ['change', 'keyup', 'paste', 'click'].forEach(function(e) {
            elQty.addEventListener(e, function() {
                // Make sure it is 2 decimal float
                // (Magento allows qty to be a float not just integer)
                selectedQty = formatQty(this.value);
            });
        });
    }
    // eof Detect selected SKU qty
    
    // bof Update product data based on selected SKU (configurable)
    function updateProductData() {
        if (selectedId === 0) {
            isAddToCartReady = 0;
        } else {
            isAddToCartReady = 1;
        }
        
        if('contents' in productData) {
            // Set selected SKU data
            if (selectedSkuData !== null) {
                // Reset contents
                productData.contents = [];
                // Set selected SKU contents
                productData.contents[0] = selectedSkuData;
            }
            
            // Set selected price to item_price and value based on qty
            if (selectedPrice) {
                // Set item_price
                productData.contents[0].item_price = selectedPrice;
                
                // The value field must be calculated based on qty
                var total = selectedQty * selectedPrice;
                // Make sure it is 2 decimal float
                productData.value = parseFloat(parseFloat(total).toFixed(2));
            }
            
            if (selectedQty) {
                productData.contents[0].quantity = selectedQty;
            }
            
            if (selectedSku) {
                productData.contents[0].id = selectedSku;
            }
        }
        
        // Make sure content_type is set to product
        // Detection will return product not product_group
        if ('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKU (configurable)
    
                // eof Detect product SKU (configurable)
                <?php elseif ($productType == 'grouped'): ?>
                // bof Detect product SKUs (grouped)
    
    var contentsWithIds    = <?= /* @noEscape */ $contentsWithIdsJson ?>;
    var selectors          = {};
    var nameAttributeValue = '';
    
    for (let productId in contentsWithIds) {
        // Set all quantities to zero to as default
        contentsWithIds[productId].quantity = 0;
        
        var elPrice = document.querySelector('#product-price-' + productId);
        var elPriceInclTax = document.querySelector('#price-including-tax-product-price-' + productId);
        
        if (taxFlag) {
            if (elPriceInclTax !== null) {
                selectors['price' + productId] = elPriceInclTax;
            } else {
                if (elPrice !== null) {
                    selectors['price' + productId] = elPrice;
                }
            }
        } else {
            if (elPrice !== null) {
                selectors['price' + productId] = elPrice;
            }
        }
        
        nameAttributeValue = 'super_group[' + productId + ']';
        selectors['qty' + productId] = document.querySelector('input[name="' + nameAttributeValue + '"]');
        
        // Set all quantities and prices to current
        contentsWithIds[productId].quantity = selectors['qty' + productId].value;
        contentsWithIds[productId].item_price = formatPrice(selectors['price' + productId].innerText);
        
        // Set all selectors for change keyup paste click
        if (selectors['qty' + productId]) {
            ['change', 'keyup', 'paste', 'click'].forEach(function(e) {
                selectors['qty' + productId].addEventListener(e, function() {
                    var nameAttr = this.getAttribute('name');
                    var pId = nameAttr.replace(/[^0-9]/g, '');
                    
                    // Make sure it is 2 decimal float
                    // (Magento allows qty to be a float not just integer)
                    contentsWithIds[pId].quantity = parseFloat(parseFloat(this.value).toFixed(2));
                });
            });
        }
    }
    
    // bof Update product data based on selected SKUs (grouped)
    function updateProductData() {
        if('contents' in productData) {
            // Reset contents
            productData.contents = [];
            
            // Set value to 0
            productData.value = 0;
            
            var qty = 0;
            var newValue = 0;
            var itemValue = 0;
            var itemTotal = 0;
            
            for (let productId in contentsWithIds) {
                qty = contentsWithIds[productId].quantity;
                if (qty > 0) {
                    // Set the item in the contents
                    productData.contents.push(contentsWithIds[productId]);
                    
                    // Increase value based on qty and price
                    itemValue = contentsWithIds[productId].item_price;
                    itemTotal = itemValue * qty;
                    // Make sure it is 2 decimal float
                    newValue += parseFloat(parseFloat(itemTotal).toFixed(2));
                }
            }
            
            // Set value to new value
            productData.value = parseFloat(parseFloat(newValue).toFixed(2));
        }
        
        // Make sure content_type is set to product
        // Detection will return product not product_group
        if ('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKUs (grouped)
    
                // eof Detect product SKUs (grouped)
                <?php else: ?>
                // bof Detect product SKU (downlodable, simple, virtual, etc.)
                
    var selectedPrice  = 0;
    var selectedQty    = 0;
    var productId      = <?= /* @noEscape */ $productId ?>;
    var elPrice        = document.querySelector('#product-price-' + productId);
    var elPriceInclTax = document.querySelector('#price-including-tax-product-price-' + productId);
    var elQty          = document.getElementById('qty');
    
    // bof Detect selected SKU qty
    if (elQty) {
        ['change', 'keyup', 'paste', 'click'].forEach(function(e) {
            elQty.addEventListener(e, function() {
                // Make sure it is 2 decimal float
                // (Magento allows qty to be a float not just integer)
                selectedQty = formatQty(this.value);
            });
        });
    }
    // eof Detect selected SKU qty
    
    // bof Update product data based on selected SKUs (downlodable, simple, virtual, etc.)
    function updateProductData() {
        if('contents' in productData) {
            // Get price
            if (taxFlag) {
                if (elPriceInclTax !== null) {
                    selectedPrice = formatPrice(elPriceInclTax.innerText);
                } else {
                    if (elPrice !== null) {
                        selectedPrice = formatPrice(elPrice.innerText);
                    }
                }
            } else {
                if (elPrice !== null) {
                    selectedPrice = formatPrice(elPrice.innerText);
                }
            }
            
            var newValue     = 0;
            var newItemPrice = 0;
            var newQty       = 0;
            
            // If there is selected price update item_price
            if (selectedPrice > 0 ) {
                productData.contents[0].item_price = selectedPrice;
            }
            
            // If there is selected quantity update quantity
            if (selectedQty > 0 ) {
                productData.contents[0].quantity = selectedQty;
            }
            
            // Get new value
            newItemPrice = parseFloat(parseFloat(productData.contents[0].item_price).toFixed(2));
            newQty       = parseFloat(parseFloat(productData.contents[0].quantity).toFixed(2));
            newValue     = newItemPrice * newQty;
            
            // Make sure it is 2 decimal float
            productData.value = parseFloat(parseFloat(newValue).toFixed(2));
        }
        
        // Make sure content_type is set to product
        // Detection will return product not product_group
        if ('content_type' in productData) {
            productData.content_type = 'product';
        }
    }
    // eof Update product data based on selected SKU (downlodable, simple, virtual, etc.)
                
                // eof Detect product SKU (downlodable, simple, virtual, etc.)
                <?php endif; ?>
                
    // bof Utility functions used by all types of products
    function formatQty(text) {
        // Make sure it is 2 decimal float
        return parseFloat(parseFloat(text).toFixed(2));
    }
    
    function formatPrice(text) {
        var decimalSymbol = '<?= /* @noEscape */ $block->getPriceDecimalSymbol(); ?>';
        
        // RegEx to remove everything except numbers and decimal sign
        // Example: /[^0-9\.]/gi
        var regEx = new RegExp('[^0-9' + escapeRegExp(decimalSymbol) + ']', 'gi');
        var priceText = text.replace(regEx, '');
        
        // Replace decimal sign with decimal point
        var price = priceText.replace(decimalSymbol, '.');
        
        // Make sure it is 2 decimal float
        return parseFloat(parseFloat(price).toFixed(2));
    }
    
    function escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    // eof Utility functions used by all types of products

            // eof isDetectSelectedSkuEnabled
            <?php endif; ?>
            
            var viewContentEventId = generateEventId('ViewContent');
            var viewContentEventIdObj = {};
            viewContentEventIdObj.eventID = viewContentEventId;
            
// If needed disallowed params will be moved
productDataForViewContent = moveParamsOutsideContents(productDataForViewContent);

// Add content_ids property
productDataForViewContent = addContentIdsParam(productDataForViewContent);

            <?php if ($block->isEventEnabled('ViewContent') && $isBaseCodeEnabled): ?>
        fbq('track', 'ViewContent', productDataForViewContent, viewContentEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('ViewContent')): ?>
        if (isConsentGranted()) {fireConversionsApiEvent('ViewContent', productDataForViewContent, viewContentEventId);}
            <?php endif; ?>

// Add Pixel Events to the button's click handler

var elAddToCart = document.getElementById('product-addtocart-button');

if (elAddToCart) {
    elAddToCart.addEventListener('click', function() {
        // Update product data if detection is enabled
        if (isDetectSelectedSkuEnabled) {
            updateProductData();
        }
        // The contents must have at least one item
        if (productData.contents.length && isAddToCartReady) {
            // If needed disallowed params will be moved
            productData = moveParamsOutsideContents(productData);
            
            // Add content_ids property
            productData = addContentIdsParam(productData);
            
            var addToCartEventId = generateEventId('AddToCart');
            var addToCartEventIdObj = {};
            addToCartEventIdObj.eventID = addToCartEventId;
            
            <?php if ($block->isEventEnabled('AddToCart') && $isBaseCodeEnabled): ?>
                fbq('track', 'AddToCart', productData, addToCartEventIdObj);
                
                <?php if ($isCookieConsentEnabled): ?>
                    checkConsent();
                <?php endif; ?>
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('AddToCart')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent('AddToCart', productData, addToCartEventId);}
            <?php endif; ?>
        }
    });
}

var elAddToWishlist = document.querySelector('.action.towishlist');

if (elAddToWishlist) {
    elAddToWishlist.addEventListener('click', function() {
        // Update product data if detection is enabled
        if (isDetectSelectedSkuEnabled) {
            updateProductData();
        }
        // The contents must have at least one item
        if (productData.contents.length) {
            // If needed disallowed params will be moved
            productData = moveParamsOutsideContents(productData);
            
            // Add content_ids property
            productData = addContentIdsParam(productData);
            
            var addToWishlistEventId = generateEventId('AddToWishlist');
            var addToWishlistEventIdObj = {};
            addToWishlistEventIdObj.eventID = addToWishlistEventId;
            
            <?php if ($block->isEventEnabled('AddToWishlist') && $isBaseCodeEnabled): ?>
                fbq('track', 'AddToWishlist', productData, addToWishlistEventIdObj);
                
                <?php if ($isCookieConsentEnabled): ?>
                    checkConsent();
                <?php endif; ?>
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('AddToWishlist')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent('AddToWishlist', productData, addToWishlistEventId);}
            <?php endif; ?>
        }
    });
}
            <?php
        // eof product data
        endif; ?>
        <?php
    // eof product code
    // bof search code
    elseif (in_array($action, $pageHandlesSearch)): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
        
        <?php
        $searchData = $block->getSearchData();
        if (!empty($searchData)): ?>
            <?php
                $searchEventName = $searchData['event_name'];
                $searchEventData = $searchData['data'];
                
                $searchEventNameJson = json_encode($searchEventName, JSON_PRETTY_PRINT);
                $searchEventDataJson = json_encode($searchEventData, JSON_FORCE_OBJECT);
            ?>
            
            var searchEventName = <?= /* @noEscape */ $searchEventNameJson ?>;
            var searchEventData = <?= /* @noEscape */ $searchEventDataJson ?>;
            var searchEventId = generateEventId(searchEventName);
            var searchEventIdObj = {};
            searchEventIdObj.eventID = searchEventId;
            
            <?php if ($block->isEventEnabled('Search') && $isBaseCodeEnabled): ?>
                fbq("track", searchEventName, searchEventData, searchEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('Search')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent(searchEventName, searchEventData, searchEventId);}
            <?php endif; ?>
            
        <?php endif; ?>
        <?php
    // eof search code
    // bof register code
    elseif ($action == 'customer_account_index'): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
        
        <?php
        $regData = $block->getDataForCompleteRegistrationEvent();
        if (!empty($regData)): ?>
            <?php
                $regEventName = $regData['event_name'];
                $regEventData = $regData['data'];
                
                $regEventNameJson = json_encode($regEventName, JSON_PRETTY_PRINT);
                $regEventDataJson = json_encode($regEventData, JSON_FORCE_OBJECT);
            ?>
            
            var regEventName = <?= /* @noEscape */ $regEventNameJson ?>;
            var regEventData = <?= /* @noEscape */ $regEventDataJson ?>;
            var regEventId = generateEventId(regEventName);
            var regEventIdObj = {};
            regEventIdObj.eventID = regEventId;
            
            <?php if ($block->isEventEnabled('CompleteRegistration') && $isBaseCodeEnabled): ?>
                fbq("track", regEventName, regEventData, regEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('CompleteRegistration')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent(regEventName, regEventData, regEventId);}
            <?php endif; ?>
            
        <?php endif; ?>
        <?php
    // eof register code
    // bof checkout
    elseif (in_array($action, $pageHandlesQuote)): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
    
        <?php
        $quoteData = $block->getQuoteData();
        if (!empty($quoteData)): ?>
            <?php
                $quoteEventName = $quoteData['event_name'];
                $quoteEventData = $quoteData['data'];
                
                $quoteEventNameJson = json_encode($quoteEventName, JSON_PRETTY_PRINT);
                $quoteEventDataJson = json_encode($quoteEventData, JSON_PRETTY_PRINT);
            ?>
            
            var quoteEventName = <?= /* @noEscape */ $quoteEventNameJson ?>;
            var quoteEventData = <?= /* @noEscape */ $quoteEventDataJson ?>;
            var quoteEventId = generateEventId(quoteEventName);
            var quoteEventIdObj = {};
            quoteEventIdObj.eventID = quoteEventId;
            
            // Add content_ids property
            quoteEventData = addContentIdsParam(quoteEventData);
            
            <?php if ($block->isEventEnabled('InitiateCheckout') && $isBaseCodeEnabled): ?>
                fbq("track", quoteEventName, quoteEventData, quoteEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('InitiateCheckout')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent(quoteEventName, quoteEventData, quoteEventId);}
            <?php endif; ?>
            
        <?php endif; ?>
        <?php
    // eof checkout
    // bof checkout success
    elseif (in_array($action, $pageHandlesOrder)): ?>
        <?php if ($isPageViewEnabled && $isBaseCodeEnabled && $isPageViewWithAll): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($isPageViewEnabled && $isPageViewWithAllApi): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
        
        <?php
        $orderData = $block->getOrderData();
        if (!empty($orderData)): ?>
            <?php
                $orderEventName = $orderData['event_name'];
                $orderEventData = $orderData['data'];
                
                $orderEventNameJson = json_encode($orderEventName, JSON_PRETTY_PRINT);
                $orderEventDataJson = json_encode($orderEventData, JSON_PRETTY_PRINT);
            ?>
            
            var orderEventName = <?= /* @noEscape */ $orderEventNameJson ?>;
            var orderEventData = <?= /* @noEscape */ $orderEventDataJson ?>;
            var orderEventId = generateEventId(orderEventName);
            var orderEventIdObj = {};
            orderEventIdObj.eventID = orderEventId;
            
            // Add content_ids property
            orderEventData = addContentIdsParam(orderEventData);
            
            <?php if ($block->isEventEnabled('Purchase') && $isBaseCodeEnabled): ?>
                fbq("track", orderEventName, orderEventData, orderEventIdObj);
            <?php endif; ?>
            
            <?php if ($block->isApiEventEnabled('Purchase')): ?>
                if (isConsentGranted()) {fireConversionsApiEvent(orderEventName, orderEventData, orderEventId);}
            <?php endif; ?>
            
        <?php endif; ?>
        <?php
    // eof checkout success
    // bof cms_index_index or cms_page_view or any other page.
    else: ?>
        <?php if ($block->isEventEnabled('PageView') && $isBaseCodeEnabled): ?>
            fbq("track", "PageView", pageViewData, pageViewEventIdObj);
        <?php endif; ?>
        
        <?php if ($block->isApiEventEnabled('PageView')): ?>
            if (isConsentGranted()) {fireConversionsApiEvent("PageView", pageViewData, pageViewEventId);}
        <?php endif; ?>
    
    <?php endif; //eof cms_index_index or cms_page_view or any other page. ?>
    
    <?php if ($isCookieConsentEnabled): ?>
        checkConsent();
    <?php endif; ?>
    
    } // end of propagationStop
    } // end of run
    
        function getCookieDataFromString(str) {
            var data = {};
            
            try {
                data = JSON.parse(str);
            } catch (e) {
                if (str.indexOf('=') > -1) {
                    var arr = str.split('=');
                    var key = '';
                    var value = '';
                    var k = 1;
                    
                    for (let i = 0; i < arr.length; i+=2) {
                        key   = '';
                        value = '';
                        
                        if (arr[i] !== undefined) {
                            key = arr[i].trim();
                        }
                        
                        if (arr[k] !== undefined) {
                            value = arr[k].trim();
                        }
                        
                        if (key) {
                            data[key] = value;
                        }
                        
                        k+=2;
                    }
                } else {
                    data = str;
                }
            }
            
            return data;
        }
        
        function getCookie(name) {
            var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
            return v ? v[2] : null;
        }
        
        function isConsentGranted() {
            var isCookieConsentEnabled = <?= /* @noEscape */ $isCookieConsentEnabled ?>;
            
            // If cookie consent feature is disabled just allow everything.
            if (!isCookieConsentEnabled) {
                return 1;
            }
            
            var cookieName = '<?= /* @noEscape */ $consentCookieName ?>';
            var cookie     = decodeURIComponent(getCookie(cookieName));
            var result     = 0;
            
            if (!cookie) {
                return result;
            }
            
            var cookieData  = getCookieDataFromString(cookie);
            var cookieKey   = '<?= /* @noEscape */ $consentCookieKey ?>';
            var cookieValue = '<?= /* @noEscape */ $consentCookieValue ?>';
            
            if (cookieKey && cookieValue) {
                if (typeof cookieData === 'object' && cookieData[cookieKey] !== undefined) {
                    var value = cookieData[cookieKey];
                    
                    if (value == cookieValue) {
                        result = 1;
                    }
                }
            } else if (!cookieKey && cookieValue) {
                if (cookie.indexOf(cookieValue) !== -1) {
                    result = 1;
                }
            } else if (cookieKey && !cookieValue) {
                if (typeof cookieData === 'object' && cookieKey in cookieData) {
                    result = 1;
                }
            } else {
                if (cookie) {
                    result = 1;
                }
            }
            
            return result;
        }
        
        function checkConsent() {
            if (isConsentGranted()) {
                <?php if ($isCookieConsentEnabled): ?>
                fbq('consent', 'grant');
                <?php endif; ?>
            }
        }
        
        // Check consent on document ready
        checkConsent();
        
        var elConsentButton = document.querySelector('<?= /* @noEscape */ $consentButton ?>');
        
        if (elConsentButton !== null) {
            // Add consent grant call to the consent button's click handler
            elConsentButton.addEventListener('click', function() {
                setTimeout(function() {
                    checkConsent();
                }, 1000);
            });
        }
        
        // eof code
        
            } // eof loadCode
            
            events.forEach(function (e) {
                window.addEventListener(e, loadCode, {once: true, passive: true});
            });
        }(['touchstart', 'mouseover', 'wheel', 'scroll', 'keydown', 'apptrianmetastart'])); // eof loadCode IIFE
        
        <?php if (in_array($action, $pageHandlesOrder)): ?>
        var apptrianMetaStartEvent = new Event('apptrianmetastart', {bubbles: true});
        document.dispatchEvent(apptrianMetaStartEvent);
        <?php endif; ?>
        
    } // end of onDocumentReady
    
    // In case the document is already rendered
    if (document.readyState!='loading') {
        onDocumentReady();
    // Modern browsers
    } else if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', onDocumentReady);
    // Old browsers
    } else {
        document.attachEvent('onreadystatechange', function() {
            if (document.readyState=='complete') {
                onDocumentReady();
            }
        });
    }
    
}(window, document)); // eof IIFE
</script>

    <?php if ($block->isNoScriptEnabled()): ?>
<noscript>
        <?php foreach ($idData as $id): ?>
<img height="1" width="1" style="display:none" 
alt="Meta Pixel <?= /* @noEscape */ $id ?>" 
src="https://www.facebook.com/tr?id=<?= /* @noEscape */ $id ?>&ev=PageView&noscript=1"/>
        <?php endforeach; ?>
</noscript>
<?php endif; ?>
<!-- End Meta Pixel Code -->

    <?php
// eof Check if Meta Pixel is allowed
endif; ?>
